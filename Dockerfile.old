FROM nvidia/cuda:12.4.1-cudnn-runtime-ubuntu22.04

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

# Install dependencies
RUN apt-get update && apt-get install -y \
    vim \
    wget \
    curl \
    nano \
    gcc \
    g++ \
    make \
    libssl-dev \
    bzip2 \
    libffi-dev \
    python3 \
    python3-pip \
    python3-dev \
    sudo \
    git \
    build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install miniconda3
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/conda && \
    rm ~/miniconda.sh && \
    /opt/conda/bin/conda clean -tipy && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate" >> ~/.bashrc

RUN /bin/bash -c "source activate" 

SHELL ["conda", "run", "--no-capture-output", "/bin/bash", "-c"]

# nvm environment variables
RUN mkdir -p /usr/local/nvm
ENV NVM_DIR /usr/local/nvm
ENV NODE_VERSION 20.15.1

# install nvm
# https://github.com/creationix/nvm#install-script
RUN curl --silent -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

# install node and npm
RUN /bin/bash -c "source $NVM_DIR/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default"

# add node and npm to path so the commands are available
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH

# Install configurable-http-proxy
RUN /bin/bash -c "source $NVM_DIR/nvm.sh && npm install -g configurable-http-proxy"

# Install Python libraries
RUN pip3 install --upgrade pip
RUN pip3 install jupyterhub jupyterlab ipywidgets wheel

# Install PyTorch with CUDA 12.4
RUN pip3 install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu124

# Install TensorFlow with GPU support
RUN pip3 install tensorflow[and-cuda]

# Install a default conda environment for all users
RUN mkdir -p /opt/conda/envs/
RUN conda create --prefix /opt/conda/envs/python python=3.12 ipykernel
RUN opt/conda/envs/python/bin/python -m ipykernel install --prefix /usr/local/ --name 'python' --display-name "Python 3.12 (default)"

# Add Jupyter kernelspecs for PyTorch and TensorFlow
#RUN python3 -m ipykernel install --user --name pytorch --display-name "Python (PyTorch)"
#RUN python3 -m ipykernel install --user --name tensorflow-gpu --display-name "Python (TensorFlow-GPU)"

# Create a JupyterHub configuration file
RUN mkdir -p /etc/jupyterhub
COPY jupyterhub_config.py /etc/jupyterhub/jupyterhub_config.py
#RUN jupyterhub --generate-config -f /etc/jupyterhub/jupyterhub_config.py

# Expose port
EXPOSE 8000

# Add a default user with password 
RUN adduser --disabled-password --gecos "" jereiard
RUN echo "jereiard:jereiard" | chpasswd
RUN chmod +w /etc/sudoers
RUN echo 'jereiard ALL=(ALL) NOPASSWD:ALL' | tee -a /etc/sudoers
RUN chmod -w /etc/sudoers

# Ensure the home directory for the default user
RUN mkdir -p /home/jereiard
RUN chown jereiard:jereiard /home/jereiard

# Copy the entrypoint script
COPY jupyterhub-entrypoint.sh /usr/local/bin/jupyterhub-entrypoint.sh
RUN chmod +x /usr/local/bin/jupyterhub-entrypoint.sh

# Start JupyterHub
ENTRYPOINT ["conda", "run", "--no-capture-output", "/usr/local/bin/jupyterhub-entrypoint.sh"]